import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import '../../providers/cart_provider.dart';
import '../../models/cart_item_model.dart';

class ProductDetailScreen extends StatelessWidget {
  final Map<String, String> product;
  final String productId;

  const ProductDetailScreen({
    super.key,
    required this.product,
    required this.productId,
  });

  @override
  Widget build(BuildContext context) {
    final cartProvider = Provider.of<CartProvider>(context);

    return Scaffold(
      appBar: AppBar(
        title: Text(product["name"] ?? "Chi ti·∫øt s·∫£n ph·∫©m"),
        backgroundColor: Colors.blue,
        foregroundColor: Colors.white,
        elevation: 0,
        actions: [
          Stack(
            children: [
              IconButton(
                icon: const Icon(Icons.shopping_cart),
                onPressed: () {
                  Navigator.pushNamed(context, '/cart');
                },
              ),
              if (cartProvider.totalQuantity > 0)
                Positioned(
                  right: 6,
                  top: 6,
                  child: Container(
                    padding: const EdgeInsets.all(2),
                    decoration: BoxDecoration(
                      color: Colors.red,
                      borderRadius: BorderRadius.circular(10),
                    ),
                    constraints: const BoxConstraints(
                      minWidth: 16,
                      minHeight: 16,
                    ),
                    child: Text(
                      '${cartProvider.totalQuantity}',
                      style: const TextStyle(
                        color: Colors.white,
                        fontSize: 12,
                        fontWeight: FontWeight.bold,
                      ),
                      textAlign: TextAlign.center,
                    ),
                  ),
                ),
            ],
          ),
        ],
      ),
      body: SingleChildScrollView(
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            // H√¨nh ·∫£nh s·∫£n ph·∫©m
            Container(
              width: double.infinity,
              height: 300,
              color: Colors.grey[100],
              child: Image.network(
                product["image"] ?? "",
                fit: BoxFit.cover,
                loadingBuilder: (context, child, loadingProgress) {
                  if (loadingProgress == null) return child;
                  return Center(
                    child: CircularProgressIndicator(
                      valueColor: AlwaysStoppedAnimation<Color>(Colors.blue),
                    ),
                  );
                },
                errorBuilder: (context, error, stackTrace) {
                  return Center(
                    child: Column(
                      mainAxisAlignment: MainAxisAlignment.center,
                      children: [
                        Icon(
                          Icons.image_not_supported,
                          size: 64,
                          color: Colors.grey[400],
                        ),
                        const SizedBox(height: 8),
                        Text(
                          "Kh√¥ng th·ªÉ t·∫£i h√¨nh ·∫£nh",
                          style: TextStyle(color: Colors.grey[600]),
                        ),
                      ],
                    ),
                  );
                },
              ),
            ),

            // Th√¥ng tin s·∫£n ph·∫©m
            Padding(
              padding: const EdgeInsets.all(16.0),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  // T√™n s·∫£n ph·∫©m
                  Text(
                    product["name"] ?? "T√™n s·∫£n ph·∫©m",
                    style: const TextStyle(
                      fontSize: 24,
                      fontWeight: FontWeight.bold,
                    ),
                  ),
                  const SizedBox(height: 8),

                  // Gi√° s·∫£n ph·∫©m
                  Text(
                    product["price"] ?? "Gi√° ch∆∞a c√≥",
                    style: const TextStyle(
                      fontSize: 20,
                      fontWeight: FontWeight.bold,
                      color: Colors.blue,
                    ),
                  ),
                  const SizedBox(height: 16),

                  // M√¥ t·∫£ s·∫£n ph·∫©m
                  Container(
                    width: double.infinity,
                    padding: const EdgeInsets.all(16),
                    decoration: BoxDecoration(
                      color: Colors.grey[50],
                      borderRadius: BorderRadius.circular(12),
                      border: Border.all(color: Colors.grey[200]!),
                    ),
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        const Text(
                          "M√¥ t·∫£ s·∫£n ph·∫©m",
                          style: TextStyle(
                            fontSize: 18,
                            fontWeight: FontWeight.bold,
                          ),
                        ),
                        const SizedBox(height: 8),
                        Text(
                          _getProductDescription(product["name"] ?? ""),
                          style: const TextStyle(fontSize: 14, height: 1.5),
                        ),
                      ],
                    ),
                  ),
                  const SizedBox(height: 16),

                  // Th√¥ng tin b·ªï sung
                  Container(
                    width: double.infinity,
                    padding: const EdgeInsets.all(16),
                    decoration: BoxDecoration(
                      color: Colors.blue[50],
                      borderRadius: BorderRadius.circular(12),
                      border: Border.all(color: Colors.blue[100]!),
                    ),
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        const Text(
                          "Th√¥ng tin b·ªï sung",
                          style: TextStyle(
                            fontSize: 18,
                            fontWeight: FontWeight.bold,
                            color: Colors.blue,
                          ),
                        ),
                        const SizedBox(height: 12),
                        _buildInfoRow("‚úÖ", "Mi·ªÖn ph√≠ v·∫≠n chuy·ªÉn"),
                        _buildInfoRow("üîÑ", "ƒê·ªïi tr·∫£ trong 30 ng√†y"),
                        _buildInfoRow("üõ°Ô∏è", "B·∫£o h√†nh ch√≠nh h√£ng"),
                        _buildInfoRow("üìû", "H·ªó tr·ª£ 24/7"),
                      ],
                    ),
                  ),
                ],
              ),
            ),
          ],
        ),
      ),
      bottomNavigationBar: Container(
        padding: const EdgeInsets.all(16),
        decoration: BoxDecoration(
          color: Colors.white,
          boxShadow: [
            BoxShadow(
              color: Colors.grey.withOpacity(0.3),
              spreadRadius: 1,
              blurRadius: 5,
              offset: const Offset(0, -3),
            ),
          ],
        ),
        child: Row(
          children: [
            // Hi·ªÉn th·ªã tr·∫°ng th√°i gi·ªè h√†ng
            Expanded(
              child: Column(
                mainAxisSize: MainAxisSize.min,
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  if (cartProvider.isInCart(productId))
                    Text(
                      "ƒê√£ c√≥ ${cartProvider.getItemQuantity(productId)} trong gi·ªè",
                      style: const TextStyle(
                        fontSize: 12,
                        color: Colors.green,
                        fontWeight: FontWeight.w500,
                      ),
                    ),
                  Text(
                    product["price"] ?? "Gi√° ch∆∞a c√≥",
                    style: const TextStyle(
                      fontSize: 18,
                      fontWeight: FontWeight.bold,
                      color: Colors.blue,
                    ),
                  ),
                ],
              ),
            ),
            const SizedBox(width: 16),

            // N√∫t th√™m v√†o gi·ªè h√†ng
            SizedBox(
              width: 200,
              child: ElevatedButton.icon(
                onPressed: () {
                  final cartItem = CartItemModel(
                    productId: productId,
                    productName: product["name"]!,
                    price: _parsePrice(product["price"]!),
                    imageUrl: product["image"]!,
                    quantity: 1,
                  );

                  cartProvider.addItem(cartItem);

                  ScaffoldMessenger.of(context).showSnackBar(
                    SnackBar(
                      content: Text(
                        "ƒê√£ th√™m ${cartItem.productName} v√†o gi·ªè h√†ng!",
                      ),
                      backgroundColor: Colors.green,
                      duration: const Duration(seconds: 2),
                      action: SnackBarAction(
                        label: "Xem gi·ªè h√†ng",
                        textColor: Colors.white,
                        onPressed: () {
                          Navigator.pushNamed(context, '/cart');
                        },
                      ),
                    ),
                  );
                },
                icon: const Icon(Icons.add_shopping_cart),
                label: const Text("Th√™m v√†o gi·ªè"),
                style: ElevatedButton.styleFrom(
                  backgroundColor: Colors.blue,
                  foregroundColor: Colors.white,
                  padding: const EdgeInsets.symmetric(vertical: 12),
                  shape: RoundedRectangleBorder(
                    borderRadius: BorderRadius.circular(12),
                  ),
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildInfoRow(String icon, String text) {
    return Padding(
      padding: const EdgeInsets.only(bottom: 8),
      child: Row(
        children: [
          Text(icon, style: const TextStyle(fontSize: 16)),
          const SizedBox(width: 8),
          Text(text, style: const TextStyle(fontSize: 14)),
        ],
      ),
    );
  }

  String _getProductDescription(String productName) {
    // T·∫°o m√¥ t·∫£ d·ª±a tr√™n t√™n s·∫£n ph·∫©m
    if (productName.toLowerCase().contains('iphone')) {
      return "iPhone 15 m·ªõi nh·∫•t v·ªõi chip A17 Pro m·∫°nh m·∫Ω, camera 48MP ch·∫•t l∆∞·ª£ng cao, m√†n h√¨nh Super Retina XDR 6.1 inch. Thi·∫øt k·∫ø titanium cao c·∫•p, pin s·ª≠ d·ª•ng c·∫£ ng√†y, h·ªó tr·ª£ s·∫°c kh√¥ng d√¢y v√† s·∫°c nhanh.";
    } else if (productName.toLowerCase().contains('macbook')) {
      return "MacBook Pro v·ªõi chip M3 m·∫°nh m·∫Ω, m√†n h√¨nh Liquid Retina XDR 14 inch, th·ªùi l∆∞·ª£ng pin l√™n ƒë·∫øn 18 gi·ªù. Ho√†n h·∫£o cho c√¥ng vi·ªác chuy√™n nghi·ªáp, ch·ªânh s·ª≠a video 4K, l·∫≠p tr√¨nh v√† thi·∫øt k·∫ø ƒë·ªì h·ªça.";
    } else if (productName.toLowerCase().contains('airpods')) {
      return "AirPods Pro th·∫ø h·ªá m·ªõi v·ªõi chip H2, ch·ªëng ·ªìn ch·ªß ƒë·ªông ti√™n ti·∫øn, √¢m thanh kh√¥ng gian ƒë∆∞·ª£c c√° nh√¢n h√≥a. Thi·∫øt k·∫ø tho·∫£i m√°i, pin s·ª≠ d·ª•ng l√™n ƒë·∫øn 6 gi·ªù, case s·∫°c MagSafe.";
    } else if (productName.toLowerCase().contains('ipad')) {
      return "iPad Air v·ªõi chip M1 si√™u nhanh, m√†n h√¨nh Liquid Retina 10.9 inch, h·ªó tr·ª£ Apple Pencil v√† Magic Keyboard. L√Ω t∆∞·ªüng cho h·ªçc t·∫≠p, l√†m vi·ªác v√† gi·∫£i tr√≠.";
    } else {
      return "S·∫£n ph·∫©m ch·∫•t l∆∞·ª£ng cao v·ªõi thi·∫øt k·∫ø hi·ªán ƒë·∫°i, t√≠nh nƒÉng v∆∞·ª£t tr·ªôi v√† ƒë·ªô b·ªÅn l√¢u d√†i. ƒê∆∞·ª£c b·∫£o h√†nh ch√≠nh h√£ng v√† h·ªó tr·ª£ k·ªπ thu·∫≠t t·∫≠n t√¨nh.";
    }
  }

  double _parsePrice(String priceString) {
    // Lo·∫°i b·ªè k√Ω t·ª± kh√¥ng ph·∫£i s·ªë
    String cleanPrice = priceString.replaceAll(RegExp(r'[^\d]'), '');
    return double.tryParse(cleanPrice) ?? 0.0;
  }
}
